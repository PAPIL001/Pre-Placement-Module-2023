class Solution {
  public int numIslands(char[][] grid) {
	int islands = 0; // initialize a counter for the number of total islands

	for (int x = 0; x < grid.length; x++){
		for (int y = 0; y < grid[0].length; y++){
			if (grid[x][y] == '1'){
				deleteIsland(grid,x,y); // delete the island in its entirety (mark as zeros)
				islands++; // increment the island counter
			}
		}
	}

	return islands;
}

private void deleteIsland(char[][] grid, int x, int y){
	// base case - either x or y are out of the grid, or we reached the end of the island
	if (x < 0 || x >= grid.length || y < 0 || y >= grid[0].length || grid[x][y] == '0')
		return;

	grid[x][y] = '0'; // mark as deleted

	// delete the neighbours recursively
	deleteIsland(grid, x+1, y);
	deleteIsland(grid, x, y+1);
	deleteIsland(grid, x-1, y);
	deleteIsland(grid, x, y-1);
}
}